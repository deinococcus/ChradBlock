Index: src/chrome/common/sandbox_methods_linux.h
===================================================================
--- src/chrome/common/sandbox_methods_linux.h	(revision 48115)
+++ src/chrome/common/sandbox_methods_linux.h	(working copy)
@@ -17,6 +17,7 @@
     METHOD_GET_CHILD_WITH_INODE = 34,
     METHOD_GET_STYLE_FOR_STRIKE = 35,
     METHOD_MAKE_SHARED_MEMORY_SEGMENT = 36,
+    METHOD_SHOULD_BLOCK_URL,
   };
 };
 
Index: src/chrome/browser/renderer_host/render_sandbox_host_linux.cc
===================================================================
--- src/chrome/browser/renderer_host/render_sandbox_host_linux.cc	(revision 48115)
+++ src/chrome/browser/renderer_host/render_sandbox_host_linux.cc	(working copy)
@@ -12,6 +12,7 @@
 #include <time.h>
 
 #include <vector>
+#include <iostream>
 
 #include "base/command_line.h"
 #include "base/eintr_wrapper.h"
@@ -139,6 +140,8 @@
       HandleGetStyleForStrike(fd, pickle, iter, fds);
     } else if (kind == LinuxSandbox::METHOD_MAKE_SHARED_MEMORY_SEGMENT) {
       HandleMakeSharedMemorySegment(fd, pickle, iter, fds);
+    } else if (kind == LinuxSandbox::METHOD_SHOULD_BLOCK_URL) {
+      HandleShouldBlockUrl(fd, pickle, iter, fds);
     }
 
   error:
@@ -148,6 +151,19 @@
     }
   }
 
+  void HandleShouldBlockUrl(int fd, const Pickle& pickle, void* iter,
+                               std::vector<int>& fds) {
+    std::string url;
+    if (!pickle.ReadString(&iter, &url)) {
+      std::cout << "Browser:: Receving url failed" << std::endl;
+      return;
+    }
+    std::cout << "Browser:: FILTERING " << url << std::endl;
+    Pickle reply;
+      reply.WriteBool(false);
+    SendRendererReply(fds, reply, -1);
+  }
+
   void HandleFontMatchRequest(int fd, const Pickle& pickle, void* iter,
                               std::vector<int>& fds) {
     bool fileid_valid;
